var _Logiraptor$elm_bench$Bench$roundDown10 = function (n) {
	return A2(
		F2(
			function (x, y) {
				return Math.pow(x, y);
			}),
		10,
		_elm_lang$core$Basics$floor(
			A2(
				_elm_lang$core$Basics$logBase,
				10,
				_elm_lang$core$Basics$toFloat(n))));
};
var _Logiraptor$elm_bench$Bench$roundUp = function (n) {
	var base = _Logiraptor$elm_bench$Bench$roundDown10(n);
	return (_elm_lang$core$Native_Utils.cmp(n, base) < 1) ? base : ((_elm_lang$core$Native_Utils.cmp(n, 2 * base) < 1) ? (2 * base) : ((_elm_lang$core$Native_Utils.cmp(n, 3 * base) < 1) ? (3 * base) : ((_elm_lang$core$Native_Utils.cmp(n, 4 * base) < 1) ? (4 * base) : ((_elm_lang$core$Native_Utils.cmp(n, 5 * base) < 1) ? (5 * base) : (10 * base)))));
};
var _Logiraptor$elm_bench$Bench$repeat = F2(
	function (f, n) {
		var _p0 = A2(
			_elm_lang$core$List$map,
			function (i) {
				return f(
					{ctor: '_Tuple0'});
			},
			_elm_lang$core$Native_List.range(0, n));
		return {ctor: '_Tuple0'};
	});
var _Logiraptor$elm_bench$Bench$timeTask = F2(
	function (n, f) {
		return A2(
			_elm_lang$core$Task$andThen,
			_elm_lang$core$Time$now,
			function (start) {
				var _p1 = f(n);
				return _elm_lang$core$Task$succeed(start);
			});
	});
var _Logiraptor$elm_bench$Bench$benchTask = F2(
	function (n, f) {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (start, end) {
					return end - start;
				}),
			A2(_Logiraptor$elm_bench$Bench$timeTask, n, f),
			_elm_lang$core$Time$now);
	});
var _Logiraptor$elm_bench$Bench$goalTime = _elm_lang$core$Time$second;
var _Logiraptor$elm_bench$Bench$nextIterationCount = F2(
	function (t, n) {
		var timePerOp = t / _elm_lang$core$Basics$toFloat(n);
		var estimatedCount = (_Logiraptor$elm_bench$Bench$goalTime / timePerOp) * 1.2;
		var roundedCount = _Logiraptor$elm_bench$Bench$roundUp(
			_elm_lang$core$Basics$round(estimatedCount));
		var clampedTotal = A2(
			_elm_lang$core$Basics$min,
			1000000000,
			A2(_elm_lang$core$Basics$min, n * 100, roundedCount));
		return (_elm_lang$core$Native_Utils.cmp(clampedTotal, n) < 1) ? (n + 1) : clampedTotal;
	});
var _Logiraptor$elm_bench$Bench$tryUntilAccurate = function (f) {
	var innerTry = function (n) {
		return A2(
			_elm_lang$core$Task$andThen,
			A2(_Logiraptor$elm_bench$Bench$benchTask, n, f),
			function (r) {
				if ((_elm_lang$core$Native_Utils.cmp(n, 1000000000) > -1) || (_elm_lang$core$Native_Utils.cmp(r, _Logiraptor$elm_bench$Bench$goalTime) > 0)) {
					return _elm_lang$core$Task$succeed(
						{
							operationsPerSecond: _elm_lang$core$Basics$toFloat(n) / _elm_lang$core$Time$inSeconds(r),
							totalCalls: n,
							timePerOp: r / _elm_lang$core$Basics$toFloat(n)
						});
				} else {
					var newCount = A2(_Logiraptor$elm_bench$Bench$nextIterationCount, r, n);
					return innerTry(newCount);
				}
			});
	};
	return innerTry(1);
};
var _Logiraptor$elm_bench$Bench$benchmark = F2(
	function (toMsg, f) {
		return A3(
			_elm_lang$core$Task$perform,
			toMsg,
			toMsg,
			_Logiraptor$elm_bench$Bench$tryUntilAccurate(f));
	});
var _Logiraptor$elm_bench$Bench$Timing = F3(
	function (a, b, c) {
		return {operationsPerSecond: a, totalCalls: b, timePerOp: c};
	});
